name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd api
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Black (code formatting check)
        run: |
          cd api
          black --check --diff .

      - name: Run isort (import sorting check)
        run: |
          cd api
          isort --check-only --diff .

      - name: Run Flake8 (linting)
        run: |
          cd api
          flake8 .

      - name: Run MyPy (type checking)
        run: |
          cd api
          mypy --ignore-missing-imports .

      - name: Run Bandit (security check)
        run: |
          cd api
          bandit -r . -f json -o bandit-report.json || true
          bandit -r .

      - name: Run Safety (dependency security check)
        run: |
          cd api
          safety check

      - name: Run Tests
        run: |
          cd api
          pytest --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.xml
          flags: python
          name: codecov-python

  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint (JavaScript linting)
        run: |
          cd frontend
          npm run lint

      - name: Run Prettier (code formatting check)
        run: |
          cd frontend
          npm run format:check

      - name: Run HTML validation
        run: |
          cd frontend
          npm run validate:html

      - name: Run Stylelint (CSS linting)
        run: |
          cd frontend
          npx stylelint "html/**/*.css"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  docker-quality:
    name: Docker Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: api/Dockerfile
          format: sarif
          output-file: hadolint-api.sarif
          no-fail: true

      - name: Run Hadolint (Frontend Dockerfile)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: frontend/Dockerfile
          format: sarif
          output-file: hadolint-frontend.sarif
          no-fail: true

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            hadolint-api.sarif
            hadolint-frontend.sarif
        continue-on-error: true

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [python-quality, frontend-quality, security-scan, docker-quality]
    if: always()
    
    steps:
      - name: Check job status
        run: |
          if [[ "${{ needs.python-quality.result }}" == "failure" || "${{ needs.frontend-quality.result }}" == "failure" ]]; then
            echo "Code quality checks failed!"
            exit 1
          fi
          echo "All quality checks passed!"